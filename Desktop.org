#+TITLE: Desktop Environment
#+PROPERTY: header-args :mkdirp yes

* Table of Contents
:PROPERTIES:
:TOC:      :include all :ignore this
:END:
:CONTENTS:
- [[#window-manager][Window Manager]]
  - [[#helper-functions][Helper Functions]]
  - [[#configuration][Configuration]]
  - [[#desktop-configuration][Desktop Configuration]]
:END:

* Window Manager
I am trying out Emacs Window manager

Checking out configs from 
https://github.com/daviwil/dotfiles/blob/master/Desktop.org
https://gitlab.com/dwt1/dotfiles/-/blob/master/.doom.d/config.org#exwm
https://wiki.archlinux.org/index.php/EXWM
#+begin_src emacs-lisp :tangle .emacs.d/exwm.el

(use-package exwm
  :init
  (setq mouse-autoselect-window nil
        focus-follows-mouse t
        exwm-workspace-warp-cursor t
        exwm-workspace-number 5)
        ;exwm-workspace-display-echo-area-timeout 5
        ;exwm-workspace-minibuffer-position 'bottom) ;; Annoying focus issues
  :config
  ;; Make class name the buffer name
  (add-hook 'exwm-update-class-hook
            (lambda ()
              (exwm-workspace-rename-buffer exwm-class-name)))
  (add-hook 'exwm-update-title-hook
            (lambda ()
              (pcase exwm-class-name
                ("Vimb" (exwm-workspace-rename-buffer (format "vimb: %s" exwm-title)))
                ("qutebrowser" (exwm-workspace-rename-buffer (format "Qutebrowser: %s" exwm-title))))))

  (exwm-enable))

;; Enable exwm-randr before exwm-init gets called
(use-package exwm-randr
  :if dw/exwm-enabled
  :after (exwm)
  :config
  (exwm-randr-enable)
  (setq exwm-randr-workspace-monitor-plist '(4 "eDP-1")))
#+end_src

** Helper Functions
#+begin_src emacs-lisp
(defun exwm/run-in-background (command)
  (let ((command-parts (split-string command "[ ]+")))
    (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

(defun exwm/bind-function (key invocation &rest bindings)
  "Bind KEYs to FUNCTIONs globally"
  (while key
    (exwm-input-set-key (kbd key)
                        `(lambda ()
                           (interactive)
                           (funcall ',invocation)))
    (setq key (pop bindings)
          invocation (pop bindings))))

(defun exwm/bind-command (key command &rest bindings)
  "Bind KEYs to COMMANDs globally"
  (while key
    (exwm-input-set-key (kbd key)
                        `(lambda ()
                           (interactive)
                           (exwm/run-in-background ,command)))
    (setq key (pop bindings)
          command (pop bindings))))
#+end_src

** Configuration
#+begin_src emacs-lisp
(defun dn/exwm-init-hook ()
  ;; Launch Telega in workspace 0 if we've logged in before
  ;; (when (file-exists-p "~/.telega/db.sqlite")
  ;;   (telega nil))

  ;; Make workspace 1 be the one where we land at startup
  (exwm-workspace-switch-create 1)

  ;; Open eshell by default
  (eshell)

  ;; Launch apps that will run in the background
  (exwm/run-in-background "dunst")
  (exwm/run-in-background "nm-applet")
  (exwm/run-in-background "syncthing-gtk --minimized")
  (exwm/run-in-background "redshift -l 36.083286:-87.009861 -t 6500:3500"))

(use-package exwm
  :if dn/exwm-enabled
  :config
  ;(display-time-mode 1) ;; Not needed for now since we have a panel

  (add-hook 'exwm-mode-hook
            (lambda ()
              (evil-local-set-key 'motion (kbd "C-u") nil)))

  (require 'dn-exwm)

  (defun dn/setup-window-by-class ()
    (interactive)
    (pcase exwm-class-name
      ("qutebrowser" (exwm-workspace-move-window 2))
      ("qjackctl" (exwm-floating-toggle-floating))
      ("mpv" (exwm-floating-toggle-floating)
             (dn/exwm-floating-toggle-pinned))))

  ;; Do some post-init setup
  (add-hook 'exwm-init-hook #'dn/exwm-init-hook)

  ;; Manipulate windows as they're created
  (add-hook 'exwm-manage-finish-hook
            (lambda ()
              ;; Send the window where it belongs
              (dn/setup-window-by-class)))

              ;; Hide the modeline on all X windows
              ;(exwm-layout-hide-mode-line)))

  ;; Hide the modeline on all X windows
  (add-hook 'exwm-floating-setup-hook
            (lambda ()
              (exwm-layout-hide-mode-line))))

(use-package exwm-systemtray
  :disabled
  :if dn/exwm-enabled
  :after (exwm)
  :config
  (exwm-systemtray-enable)
  (setq exwm-systemtray-height 35))
#+end_src

** Desktop Configuration
#+begin_src emacs-lisp
(defun dn/run-xmodmap ()
  (interactive)
  (start-process-shell-command "xmodmap" nil "xmodmap ~/.Xmodmap"))

(defun dn/update-wallpapers ()
  (interactive)
  (start-process-shell-command
   "feh" nil
   (format "feh --bg-scale ~/.dotfiles/backgrounds/%s" (alist-get 'desktop/background dn/system-settings))))

(setq dn/panel-process nil)
(defun dn/kill-panel ()
  (interactive)
  (when dn/panel-process
    (ignore-errors
      (kill-process dn/panel-process)))
  (setq dn/panel-process nil))

(defun dn/start-panel ()
  (interactive)
  (dn/kill-panel)
  (setq dn/panel-process (start-process-shell-command "polybar" nil "polybar panel")))

(defun dn/update-screen-layout ()
  (interactive)
  (let ((layout-script "~/bin/update-screens"))
     (message "Running screen layout script: %s" layout-script)
     (start-process-shell-command "xrandr" nil layout-script)))

(defun dn/configure-desktop ()
  (interactive)
    (dn/run-xmodmap)
    (dn/update-screen-layout)
    (run-at-time "2 sec" nil (lambda () (dn/update-wallpapers))))

(defun dn/on-exwm-init ()
  (dn/configure-desktop)
  (dn/start-panel))

(when dn/exwm-enabled
  ;; Configure the desktop for first load
  (add-hook 'exwm-init-hook #'dn/on-exwm-init))
#+end_src
