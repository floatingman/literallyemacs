#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./.emacs.d/init.el

* Table of Contents
:PROPERTIES:
:TOC:      :include all :ignore this
:END:
:CONTENTS:
:END:

* Startup Performance

Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time.
#+begin_src emacs-lisp
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (message "*** Emacs loaded in %s with %d garbage collections."
		       (format "%.2f seconds"
			       (float-time
				(time-subtract after-init-time before-init-time)))
		       gcs-done)))
#+end_src

* System Settings

* Keep .emacs.d Clean

I don't want a bunch of transient files showing up as untracked in the Git repo so I move them all to another location
#+begin_src emacs-lisp
  ;; Keep transient cruft out of ~/.emacs.d/
  (setq user-emacs-directory "~/.cache/emacs/"
	backup-directory-alist `(("." . ,(expand-file-name "backups" user-emacs-directory)))
	url-history-file (expand-file-name "url/history" user-emacs-directory)
	auto-save-list-file-prefix (expand-file-name "auto-save-list/.saves-" user-emacs-directory)
	projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" user-emacs-directory))

  ;; Keep customization settings in a temporary file (thanks Ambrevar!)
  (setq custom-file
	(if (boundp 'server-socket-dir)
	    (expand-file-name "custom.el" server-socket-dir)
	  (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  (load custom-file t)
#+end_src

* Package Management
Setup ELPA, MELPA, and Org package repositories and load 'use-package to manage package configuration.
#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("melpa-stable" . "https://stable.melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))


  (package-initialize)
  (unless package-archive-contents
     (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
     (package-install 'use-package))
  (require 'use-package)

  ;; Uncomment this to get a reading on packages that get loaded at startup
  (setq use-package-verbose t)

  ;; On non-Guix systems, "ensure" packages by default
  (setq use-package-always-ensure t)
#+end_src

* Keyboard Bindings
** ESC Cancels All
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
** Keybinding Panel (which-key)
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+end_src

* General Configuration
** User Interface
Clean up Emacs' user interface, make it more minimal
#+begin_src emacs-lisp
  ; Thanks, but no thanks
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

  ;; disable dialog boxes
  (setq use-dialog-box nil)
#+end_src

Improve Scrolling
#+begin_src emacs-lisp
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
#+end_src

Enable line numbers and customize their format
#+begin_src emacs-lisp
  (column-number-mode)

  ;; Enable line numbers for some modes
  (dolist (mode '(text-mode-hook
		  prog-mode-hook
		  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))

  ;; Override some modes which derive from the above
  (dolist (mode '(org-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

Don't warn for large files (shows up when launching videos
#+begin_src emacs-lisp
  (setq large-file-warning-threshold nil)
#+end_src

Don't warn for following symlinked files
#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src

Don't warn when advice is added for functions
#+begin_src emacs-lisp
  (setq ad-redefinition-action 'accept)
#+end_src

* Theme
** Icons
#+begin_src emacs-lisp
  (use-package all-the-icons :defer t)
#+end_src

Trying out different themes
#+begin_src emacs-lisp
  (use-package spacegray-theme :defer t)
  (use-package doom-themes :defer t)
  (load-theme 'doom-palenight t)
  (doom-themes-visual-bell-config)
#+end_src

* Mode Line
** Basic Customization
#+begin_src emacs-lisp
  (setq display-time-format "%l:%M %p %b %y"
	display-time-default-load-average nil)
#+end_src
** Enable Mode Diminishing
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src
** Doom Modeline
 #+begin_src emacs-lisp
   ;; You must run (all-the-icons-install-fonts) one time after
   ;; installing this package!

   (use-package minions
     :hook (doom-modeline-mode . minions-mode)
     :custom
     (minions-mode-line-lighter "ï†’"))

   (use-package doom-modeline
     :after eshell     ;; Make sure it gets hooked after eshell
     :hook (after-init . doom-modeline-init)
     :custom-face
     (mode-line ((t (:height 0.85))))
     (mode-line-inactive ((t (:height 0.85))))
     :custom
     (doom-modeline-height 15)
     (doom-modeline-bar-width 6)
     (doom-modeline-lsp t)
     (doom-modeline-github nil)
     (doom-modeline-mu4e nil)
     (doom-modeline-irc nil)
     (doom-modeline-minor-modes t)
     (doom-modeline-persp-name nil)
     (doom-modeline-buffer-file-name-style 'truncate-except-project)
     (doom-modeline-major-mode-icon nil))
 #+end_src
* Auto-Saving Changed Files
#+begin_src emacs-lisp
  (use-package super-save
    :ensure t
    :defer 1
    :diminish super-save-mode
    :config
    (super-save-mode +1)
    (setq super-save-auto-save-when-idle t))
#+end_src
* Auto-Reverting Changed Files
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src
* Ivy for completions
#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)
	   ("C-l" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-l" . ivy-done)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-reverse-i-search-kill))
    :init
    (ivy-mode 1))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
	   ("C-x b" . counsel-ibuffer)
	   ("C-x C-f" . counsel-find-file)
	   ("C-M-l" . counsel-imenu)
	   :map minibuffer-local-map
	   ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^

  (use-package flx  ;; Improves sorting for fuzzy-matched results
    :defer t
    :init
    (setq ivy-flx-limit 10000))

  (use-package smex ;; Adds M-x recent command sorting for counsel-M-x
    :defer 1
    :after counsel)

  (use-package wgrep)

  (use-package ivy-posframe
    :custom
    (ivy-posframe-width      115)
    (ivy-posframe-min-width  115)
    (ivy-posframe-height     10)
    (ivy-posframe-min-height 10)
    :config
    (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
    (setq ivy-posframe-parameters '((parent-frame . nil)
				    (left-fringe . 8)
				    (right-fringe . 8)))
    (ivy-posframe-mode 1))
#+end_src
* Org Mode
** Automatically "Tangle" on Save
#+begin_src emacs-lisp
  ;; since we don't want to disable org-confirm-babel-evaluate all
  ;; of the time, do it around the after-save-hook
  (defun dn/org-babel-tangle-dont-ask ()
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle)))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'dn/org-babel-tangle-dont-ask
						'run-at-end 'only-in-org-mode)))
#+end_src
* Productivity
** Syntax checking with Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :defer t
    :hook (lsp-mode . flycheck-mode))
#+end_src
** Snippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :hook (prog-mode . yas-minor-mode)
    :config
    (yas-reload-all))
#+end_src
** Smart Parenthesis
#+begin_src emacs-lisp
  (use-package smartparens
    :hook (prog-mode . smartparens-mode))
#+end_src
** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Rainbow Mode
Sets the background of HTML color strings in buffers to be the color mentioned.
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :defer t
    :hook (org-mode
	   emacs-lisp-mode
	   web-mode
	   typescript-mode
	   js2-mode))
#+end_src
* Development
** Git
*** Magit
#+begin_src emacs-lisp
  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (global-set-key (kbd "C-M-;") 'magit-status)

  (use-package magit-todos)
#+end_src
